{"version":3,"sources":["tetrominos.js","Components/Cell.jsx","Components/Board.jsx","Components/NextTetromino.jsx","Components/GameStats.jsx","Components/Footer.jsx","Hooks/useBoard.js","constants.js","Hooks/useCurrentTetromino.js","Hooks/useInterval.js","Hooks/useGameStats.jsx","Components/Tetris.jsx","App.js","index.js"],"names":["TETROMINOS","shape","color","randomTetromino","Math","floor","random","length","React","memo","value","style","border","backgroundColor","borderTopColor","borderRightColor","borderBottomColor","borderLeftColor","className","Board","board","map","row","i","cell","j","key","tetromino","tetrominoCopy","JSON","parse","stringify","forEach","_","unshift","push","Array","fill","id","level","score","rows","Footer","rel","target","href","useBoard","curTetromino","getNextTetromino","nextTetromino","clearBoard","useState","setBoard","rowsCleared","setRowsCleared","rowsClearedChanged","setRowsClearedChanged","tetris","setTetris","useEffect","prevBoard","boardCopy","rowPos","colPos","collided","clearRows","drawTetromino","reduce","resultArr","every","e","prev","newX","newY","HEIGHT","WIDTH","useCurrentTetromino","currentTetromino","setCurrentTetromino","setnextTetromino","useCallback","prevState","newShape","rand","useInterval","callback","delay","savedCallback","useRef","current","setInterval","clearInterval","useGameStats","setLevel","setScore","setRows","linePoints","calculateScore","Tetris","running","setRunning","dropTime","setDropTime","gameOver","setGameOver","updateTetrominoPos","updateTetrominoShape","resetCurrentTetromino","resetBoard","validMove","resetGameStats","moveDown","startPause","resetGame","calculateDropTime","isGameOver","newLength","curPos","moveHorizontal","dir","tabIndex","onKeyDown","keyCode","preventDefault","posX","originalPosX","hardDrop","index","reverse","rotate","onKeyUp","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac220c57.chunk.js","sourcesContent":["export const TETROMINOS = [\r\n        {   shape: [0],\r\n            color: [0, 0]\r\n        },\r\n        {   \r\n            shape: [\r\n                [0, 1, 0, 0], \r\n                [0, 1, 0, 0], \r\n                [0, 1, 0, 0], \r\n                [0, 1, 0, 0]\r\n            ],\r\n            color: [180, 100]  //cyan\r\n        },\r\n        {\r\n            shape: [\r\n                [0, 2, 0], \r\n                [0, 2, 0], \r\n                [2, 2, 0]\r\n            ], \r\n            color: [220, 100]   //blue\r\n        },\r\n        {\r\n            shape: [\r\n                [0, 3, 0], \r\n                [0, 3, 0], \r\n                [0, 3, 3]\r\n            ],\r\n            color: [39, 100]    //orange\r\n        },\r\n        {\r\n            shape: [\r\n                [4, 4], \r\n                [4, 4]\r\n            ], \r\n            color: [55, 100]   //yellow\r\n        },\r\n        {\r\n            shape: [\r\n                [0, 5, 5], \r\n                [5, 5, 0], \r\n                [0, 0, 0]\r\n            ], \r\n            color: [120, 100]   //green\r\n        },\r\n        {\r\n            shape: [\r\n                [0, 0, 0], \r\n                [6, 6, 6], \r\n                [0, 6, 0]\r\n            ],\r\n            color: [300, 100]   //purple\r\n        },\r\n        {\r\n            shape: [\r\n                [7, 7, 0], \r\n                [0, 7, 7], \r\n                [0, 0, 0]\r\n            ], \r\n            color: [0, 100]     //red\r\n        }\r\n];\r\n\r\nexport const randomTetromino = () => {\r\n    return TETROMINOS[Math.floor(Math.random() * (TETROMINOS.length-1)) + 1].shape;\r\n};","import React from 'react';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ value }) => {\r\n    let color = TETROMINOS[value].color;\r\n    const style = {\r\n        border: value === 0 ? '0px solid' : '5px solid',\r\n        backgroundColor: 'hsl(' + color[0] + ', ' + color[1] + '%, ' + (value !== 0 ? '55' : '0') + '%)',\r\n        borderTopColor: 'hsl(' + color[0] + ', ' + color[1] + '%, 30%)',\r\n        borderRightColor: 'hsl(' + color[0] + ', ' + color[1] + '%, 35%)',\r\n        borderBottomColor: 'hsl(' + color[0] + ', ' + color[1] + '%, 67%)',\r\n        borderLeftColor: 'hsl(' + color[0] + ', ' + color[1] + '%, 45%)'\r\n    };\r\n\r\n    return (  \r\n        <div className='cell' style={style}></div>\r\n    );\r\n}\r\n \r\nexport default React.memo(Cell);","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nconst Board = ({ board }) => {\r\n    return (  \r\n        <div className='board'>\r\n            {board.map((row,i) => \r\n                row.map((cell,j) => ( \r\n                    <Cell key={i+'_'+j} value={cell[0]}/>\r\n                )) \r\n            )}        \r\n        </div>\r\n\r\n    );\r\n}\r\n \r\nexport default Board;","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nconst NextTetromino = ({ tetromino }) => {\r\n\r\n    // Add extra rows/columns to center different size tetrominos in a 5x5 grid\r\n    let tetrominoCopy = JSON.parse(JSON.stringify(tetromino));\r\n    switch (tetromino[0].length) {\r\n        case 2: tetromino.forEach((_, i) => {\r\n                    tetrominoCopy[i].unshift(0);\r\n                    tetrominoCopy[i].push(0, 0);\r\n                });\r\n                tetrominoCopy.unshift(Array(5).fill(0));\r\n                tetrominoCopy.push(Array(5).fill(0))\r\n                tetrominoCopy.push(Array(5).fill(0))\r\n                break;\r\n        case 3: tetromino.forEach((_, i) => {\r\n                    tetrominoCopy[i].unshift(0);\r\n                    tetrominoCopy[i].push(0);\r\n                    });\r\n                tetrominoCopy.unshift(Array(5).fill(0));\r\n                tetrominoCopy.push(Array(5).fill(0))\r\n                break;\r\n        case 4: tetromino.forEach((_, i) => {\r\n                    tetrominoCopy[i].unshift(0);\r\n                    });\r\n                tetrominoCopy.push(Array(5).fill(0))\r\n                break;\r\n        default: \r\n                break;\r\n    }\r\n\r\n    return (  \r\n        <div id='nextTetromino'>\r\n            {tetrominoCopy.map((row,i) => \r\n                row.map((value,j) => (\r\n                    <Cell key={i+'_'+j} value={value}/>\r\n                )) \r\n            )}        \r\n        </div>\r\n    );\r\n}\r\n \r\nexport default React.memo(NextTetromino);","import React from 'react';\r\n\r\nconst GameStats = ({ level, score, rows }) => {\r\n    return (  \r\n        <div className='stats'>\r\n            <div className='statsElement'>Score: <span>{score}</span></div>\r\n            <div className='statsElement'>Level: <span>{level}</span></div>\r\n            <div className='statsElement'>Rows: <span>{rows}</span></div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default React.memo(GameStats);","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div id='footer'>\r\n            <p>Designed and coded by</p>\r\n            <a rel='noopener noreferrer' target='_blank' href='https://atiyahaider.github.io/Portfolio/'>Atiya Haider</a>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Footer;","import { useState, useEffect } from 'react';\r\nimport { HEIGHT, WIDTH } from '../constants';\r\n\r\nconst useBoard = (curTetromino, getNextTetromino, nextTetromino) => {\r\n    const clearBoard = () => {\r\n        return Array(HEIGHT).fill().map(() => Array(WIDTH).fill([0, '']));\r\n    }\r\n\r\n    const [board, setBoard] = useState(clearBoard);\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n    const [rowsClearedChanged, setRowsClearedChanged] = useState(0);\r\n    const [tetris, setTetris] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const drawTetromino = (prevBoard) => {\r\n            //clear the previous position of the current tetromino\r\n            let boardCopy = prevBoard.map(row => row.map(cell => cell[1] === '' ? [0, ''] : cell));\r\n\r\n            for (let i = 0; i < curTetromino.shape.length; i++) {\r\n                for (let j = 0; j < curTetromino.shape[i].length; j++) {\r\n                    if (curTetromino.shape[i][j] !== 0) {\r\n                        boardCopy[i + curTetromino.rowPos][j + curTetromino.colPos] = [curTetromino.shape[i][j], curTetromino.collided ? 'taken' : ''];\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (curTetromino.collided) {\r\n                boardCopy = clearRows(boardCopy);       //sweep completed rows\r\n                if (nextTetromino.length <= curTetromino.rowPos - rowsCleared) //check if not Game Over\r\n                    getNextTetromino();\r\n            }\r\n\r\n            return boardCopy;\r\n        }\r\n\r\n        setBoard(prevBoard => drawTetromino(prevBoard));\r\n\r\n    }, [curTetromino, getNextTetromino, nextTetromino, rowsCleared]);\r\n\r\n    const resetBoard = () => {\r\n        setBoard(clearBoard());\r\n        setRowsCleared(0);\r\n        setRowsClearedChanged(0);\r\n        setTetris(false);\r\n    }\r\n\r\n    const clearRows = (board) => {\r\n        let rows = 0;\r\n        let boardCopy = board.reduce((resultArr, row) => {\r\n                        if (row.every(e => e[0] !== 0)) {                  //if the row has all non-zero values\r\n                            rows++;\r\n                            resultArr.unshift(Array(WIDTH).fill([0, '']));    //add a new empty row on the top\r\n                            return resultArr;\r\n                        }\r\n                        resultArr.push(row);        //else push the incomplete row in the result\r\n                        return resultArr\r\n                    }, []);\r\n\r\n        setRowsCleared(rows);\r\n        if (rows >= 4)\r\n            setTetris(true);\r\n        else\r\n            setTetris(false);\r\n\r\n        //added rowsClearedChanged to force render when any row has cleared\r\n        if (rows > 0) \r\n            setRowsClearedChanged(prev => prev + 1);\r\n\r\n        return boardCopy;\r\n    }\r\n\r\n    const validMove = (tetromino, newX, newY) => {\r\n        for (let i = 0; i < tetromino.shape.length; i++) {\r\n            for (let j = 0; j < tetromino.shape[i].length; j++) {\r\n                if (tetromino.shape[i][j] !== 0) {\r\n                    if (\r\n                        //check if the move is beyond the bottom of the board\r\n                        (i + tetromino.rowPos + newX > HEIGHT - 1) ||\r\n                        //or if the move is beyond the width of the board\r\n                        (j + tetromino.colPos + newY < 0) || (j + tetromino.colPos + newY > WIDTH - 1)  ||\r\n                        //or if the cell is already occupied\r\n                        board[i + tetromino.rowPos + newX][j + tetromino.colPos + newY][1] === 'taken'\r\n                       )\r\n                       {\r\n                            return false;   //move not valid\r\n                       }\r\n                }\r\n            }\r\n        }\r\n\r\n        //valid move\r\n        return true; \r\n    }\r\n\r\n    return [board, resetBoard, validMove, rowsCleared, tetris, rowsClearedChanged];\r\n}\r\n\r\nexport default useBoard;","export const HEIGHT = 20;\r\nexport const WIDTH = 12;\r\nexport const START_ROW = 0;\r\nexport const START_COL = WIDTH/2 -2;\r\nexport const DROP_TIME = 1000;\r\nexport const LEVEL_CHANGE = 10; ","import { useState, useCallback } from 'react';\r\nimport { randomTetromino } from '../tetrominos';\r\nimport { START_ROW, START_COL } from '../constants';\r\n\r\nconst useCurrentTetromino = () => {\r\n    const [currentTetromino, setCurrentTetromino] = useState({\r\n                                                        shape: [],\r\n                                                        rowPos: 0,\r\n                                                        colPos: 0,\r\n                                                        collided: false\r\n                                                    });\r\n\r\n    const [nextTetromino, setnextTetromino] = useState(randomTetromino());\r\n\r\n    const updateTetrominoPos = (newX, newY, collided) => {\r\n        setCurrentTetromino( prevState => ({\r\n                                ...prevState, \r\n                                rowPos: prevState.rowPos + newX,\r\n                                colPos: prevState.colPos + newY,\r\n                                collided\r\n                            })  \r\n        )\r\n    }\r\n                                                \r\n    const updateTetrominoShape = (newShape) => {\r\n        setCurrentTetromino( prevState => ({\r\n                                ...prevState, \r\n                                shape: newShape\r\n                            })  \r\n        )\r\n    }\r\n\r\n    const getNextTetromino = useCallback(() => {\r\n        setCurrentTetromino({\r\n                            shape: nextTetromino,\r\n                            rowPos: START_ROW,// - nextTetromino.length + 1,\r\n                            colPos: START_COL,\r\n                            collided: false\r\n        })\r\n        \r\n        setnextTetromino(randomTetromino())\r\n    }, [nextTetromino])\r\n\r\n    const resetCurrentTetromino = () => {\r\n        let rand = randomTetromino();\r\n        setCurrentTetromino({\r\n                    shape: rand,\r\n                    rowPos: START_ROW,// - rand.length + 1,\r\n                    colPos: START_COL,\r\n                    collided: false\r\n        })\r\n\r\n        setnextTetromino(randomTetromino())\r\n    }\r\n\r\n    return [currentTetromino, nextTetromino, updateTetrominoPos, updateTetrominoShape, getNextTetromino, resetCurrentTetromino];\r\n}\r\n\r\nexport default useCurrentTetromino;\r\n","import { useEffect, useRef } from 'react';\r\n\r\nconst useInterval = (callback, delay) => {\r\n  const savedCallback = useRef();\r\n  \r\n  // Remember the latest callback\r\n  useEffect(() => {\r\n    savedCallback.current = callback;\r\n  }, [callback]);\r\n\r\n  // Set up the interval.\r\n  useEffect(() => {\r\n    function tick() {\r\n      savedCallback.current();\r\n    }\r\n\r\n    if (delay !== null) {\r\n      const id = setInterval(tick, delay);\r\n      return () => {\r\n        clearInterval(id);\r\n      };\r\n    }\r\n  }, [delay]);\r\n  \r\n}\r\n\r\nexport default useInterval;","import { useState, useEffect } from 'react';\r\nimport { LEVEL_CHANGE } from '../constants';\r\n\r\nconst useGameStats = (rowsCleared, rowsClearedChanged) => {\r\n    const [level, setLevel] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const calculateScore = (rowsCleared) => {\r\n            const linePoints = [40, 100, 300, 1200];\r\n\r\n            setScore(prev => prev + (linePoints[rowsCleared - 1] * (level + 1)));\r\n            // Increase level when player has cleared 10 rows\r\n            if (rows + rowsCleared >= (level + 1) * LEVEL_CHANGE) \r\n                setLevel(prev => prev + 1);\r\n            setRows(prev => prev + rowsCleared);\r\n        }\r\n\r\n        if (rowsCleared !== 0) \r\n            calculateScore(rowsCleared);\r\n\r\n    }, [rowsClearedChanged, rowsCleared]);\r\n\r\n    const resetGameStats = () => {\r\n        setLevel(0);\r\n        setScore(0);\r\n        setRows(0);\r\n    }\r\n\r\n    return [level, score, rows, resetGameStats];\r\n}\r\n\r\nexport default useGameStats;","import React, { useState } from 'react';\r\nimport { DROP_TIME } from '../constants';\r\n\r\n//components\r\nimport Board from './Board';\r\nimport NextTetromino from './NextTetromino';\r\nimport GameStats from './GameStats';\r\nimport Footer from './Footer';\r\n\r\n//hooks\r\nimport useBoard from '../Hooks/useBoard';\r\nimport useCurrentTetromino from '../Hooks/useCurrentTetromino';\r\nimport useInterval from '../Hooks/useInterval';\r\nimport useGameStats from '../Hooks/useGameStats';\r\n\r\nconst Tetris = () => {\r\n    const [running, setRunning] = useState(false);\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [currentTetromino, nextTetromino, updateTetrominoPos, updateTetrominoShape, getNextTetromino, resetCurrentTetromino] = useCurrentTetromino();\r\n    const [board, resetBoard, validMove, rowsCleared, tetris, rowsClearedChanged] = useBoard(currentTetromino, getNextTetromino, nextTetromino);\r\n    const [level, score, rows, resetGameStats] = useGameStats(rowsCleared, rowsClearedChanged);\r\n\r\n    useInterval(() => {\r\n        moveDown();\r\n    }, dropTime);            \r\n\r\n    const startPause = () => {\r\n        if (running) {  //then pause\r\n            setRunning(false);\r\n            setDropTime(null);\r\n        }\r\n        else {  //start game\r\n            if (gameOver) {\r\n                resetGame();\r\n            }\r\n            if (currentTetromino.shape.length === 0) {\r\n                getNextTetromino();\r\n            }\r\n            setRunning(true);      \r\n            setDropTime(calculateDropTime());\r\n        }\r\n    }\r\n\r\n    const calculateDropTime = () => {\r\n        return DROP_TIME - (level * 200);\r\n    }   \r\n\r\n    const resetGame = () => {\r\n        setGameOver(false);      \r\n        resetBoard();\r\n        resetCurrentTetromino();\r\n        resetGameStats();      \r\n    }\r\n\r\n    const isGameOver = (newLength, curPos) => {\r\n        if (newLength > curPos - rowsCleared)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    const moveHorizontal = dir => {\r\n        if (validMove(currentTetromino, 0, dir)) \r\n            updateTetrominoPos(0, dir, false);\r\n    }\r\n\r\n    const moveDown = () => {\r\n        if (validMove(currentTetromino, 1, 0)) \r\n            updateTetrominoPos(1, 0, false);\r\n        else {  //collided\r\n            updateTetrominoPos(0, 0, true); //mark as collided\r\n            if (isGameOver(nextTetromino.length, currentTetromino.rowPos)) {\r\n                setGameOver(true);\r\n                setRunning(false);\r\n                setDropTime(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    const rotate = () => {\r\n        let tetrominoCopy = JSON.parse(JSON.stringify(currentTetromino));\r\n\r\n        //rotate tetromino and store new shape\r\n        tetrominoCopy.shape = tetrominoCopy.shape[0].map((_, index) => tetrominoCopy.shape.map(row => row[index]).reverse());\r\n        if (validMove(tetrominoCopy, 0, 0)) {\r\n            //draw rotated shape if valid move\r\n            updateTetrominoShape(tetrominoCopy.shape)\r\n        }\r\n    }\r\n\r\n    const hardDrop = () => {\r\n        let posX = 1;\r\n        let originalPosX = currentTetromino.posX;\r\n        while (validMove(currentTetromino, posX, 0)) {\r\n            posX++;\r\n        }\r\n        updateTetrominoPos(posX-1, 0, true);\r\n\r\n        if (isGameOver(nextTetromino.length, originalPosX + posX - 1)) {            \r\n            setGameOver(true);\r\n            setRunning(false);\r\n            setDropTime(null);\r\n        }\r\n    }\r\n\r\n    const moveTetromino = (e) => {\r\n        if (running) {\r\n            switch (e.keyCode) {\r\n                case 37:   //left\r\n                    moveHorizontal(-1);\r\n                    break;\r\n                case 39:   //right\r\n                    moveHorizontal(1);\r\n                    break;\r\n                case 40:   //down\r\n                    setDropTime(null);\r\n                    moveDown();\r\n                    break;\r\n                case 32:   // hard drop\r\n                    e.preventDefault(); //to stop spacebar from activating button click\r\n                    setDropTime(null);\r\n                    hardDrop();\r\n                    break;\r\n                case 38:   //up, rotate\r\n                    rotate();\r\n                    break;\r\n                default:\r\n                    return null;\r\n            }\r\n        }   \r\n    }   \r\n\r\n    const keyRelease = (e) => {\r\n        if (running) {\r\n            if (e.keyCode === 40 || e.keyCode === 32) {\r\n                setDropTime(calculateDropTime());\r\n            }\r\n        }\r\n    }\r\n\r\n    return (  \r\n        <div className='container' tabIndex='0' onKeyDown={moveTetromino} onKeyUp={keyRelease}>\r\n            <h1 id='heading'>Tetris</h1>\r\n            <div className='tetris'>\r\n                <Board board={board}/>\r\n                <div id='information'>\r\n                    <NextTetromino tetromino={nextTetromino}/>\r\n                    <GameStats startPause={startPause} level={level} score={score} rows={rows}/>\r\n                    <div className='stats gameStatus'>\r\n                        { gameOver ? 'Game Over!' :\r\n                                    !running ? 'Press Start to continue' : \r\n                                    tetris ? 'Tetris!!' : 'Happy playing!'\r\n                        }\r\n                    </div>\r\n                    <button onClick={startPause}>Start/Pause</button>\r\n                </div>\r\n            </div>\r\n            <Footer />\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Tetris;","import React from 'react';\nimport Tetris from './Components/Tetris';\n\nconst App = () => (\n    <div> \n      <Tetris />\n    </div>\n);\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}